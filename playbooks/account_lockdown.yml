# ASIRA Account Lockdown Playbook
# Version: 1.0.0
# Last updated: 2025-03-16 13:09:38
# Author: Rahul

id: pb_account_lockdown
name: Account Lockdown
description: Locks down a potentially compromised user account and performs security checks
execution_mode: sequential
enabled: true
version: 1.0.0
created_at: 1741784578
updated_at: 1741784578
author: Mritunjay-mj

actions:
  - id: disable_account
    type: command
    description: Disable the user account temporarily
    command: user_mgmt disable {incident.username}
    continue_on_failure: false
    timeout: 60
    parameters:
      force: true
      log_reason: "Automated lockdown due to security incident {incident.id}"

  - id: reset_password
    type: command
    description: Force a password reset for the user account
    command: user_mgmt reset_pwd {incident.username} --force
    continue_on_failure: true
    timeout: 60

  - id: revoke_sessions
    type: api_call
    description: Revoke all active sessions for the user
    api_endpoint: https://auth.example.com/api/sessions/{incident.username}
    api_method: DELETE
    api_payload:
      reason: "Security incident response"
      incident_id: "{incident.id}"
    continue_on_failure: true
    timeout: 60

  - id: enable_mfa
    type: api_call
    description: Enforce MFA for the user account
    api_endpoint: https://auth.example.com/api/users/{incident.username}/mfa
    api_method: PUT
    api_payload:
      enforce_mfa: true
      grace_period_hours: 0
    continue_on_failure: true
    timeout: 30

  - id: gather_login_history
    type: enrichment
    description: Collect login history for the user account
    command: user_mgmt audit {incident.username} --days 30 --format json > {execution.id}_login_history.json
    continue_on_failure: true
    timeout: 120
    output_variable: login_history_path

  - id: analyze_login_patterns
    type: script
    description: Analyze login patterns for suspicious activity
    script: |
      #!/bin/bash
      echo "Analyzing login history for user {incident.username}"
      
      # Parse the login history file
      LOGIN_FILE="{variables.login_history_path}"
      if [ -f "$LOGIN_FILE" ]; then
        # Find unusual login locations
        unusual_locations=$(jq '.logins[] | select(.is_unusual_location == true) | .ip_address' "$LOGIN_FILE")
        unusual_count=$(echo "$unusual_locations" | wc -l)
        
        # Find failed login attempts
        failed_attempts=$(jq '.logins[] | select(.status == "failed")' "$LOGIN_FILE" | wc -l)
        
        # Output results
        echo "Found $unusual_count unusual login locations"
        echo "Found $failed_attempts failed login attempts"
        
        # Set variables for later actions
        echo "::set-output unusual_locations=$unusual_count"
        echo "::set-output failed_attempts=$failed_attempts"
      else
        echo "Login history file not found: $LOGIN_FILE"
        exit 1
      fi
    continue_on_failure: true
    timeout: 60
    output_variables:
      - unusual_locations
      - failed_attempts

  - id: notify_security_team
    type: notification
    description: Notify security team about the account lockdown
    template: security_incident
    channels:
      - email
      - slack
    parameters:
      severity: "{incident.severity}"
      username: "{incident.username}"
      incident_id: "{incident.id}"
      incident_url: "https://asira.example.com/incidents/{incident.id}"
      unusual_locations: "{variables.unusual_locations}"
      failed_attempts: "{variables.failed_attempts}"
    continue_on_failure: true
    timeout: 30

  - id: notify_user
    type: notification
    description: Notify affected user about the account action
    template: account_compromise
    channels:
      - email
      - sms
    parameters:
      username: "{incident.username}"
      reset_url: "https://account.example.com/reset?token={action_results.reset_password.reset_token}"
      help_contact: "security@example.com"
    continue_on_failure: true
    timeout: 30

  - id: create_incident_ticket
    type: api_call
    description: Create a ticket in the IT service management system
    api_endpoint: https://itsm.example.com/api/tickets
    api_method: POST
    api_headers:
      Authorization: "Bearer {credentials.itsm_api_key}"
      Content-Type: "application/json"
    api_payload:
      title: "Account Security Incident - {incident.username}"
      description: "Security incident {incident.id} triggered account lockdown for user {incident.username}"
      priority: "{incident.severity}"
      category: "Security"
      subcategory: "Account Compromise"
      assigned_team: "Security Operations"
      metadata:
        incident_id: "{incident.id}"
        unusual_locations: "{variables.unusual_locations}"
        failed_attempts: "{variables.failed_attempts}"
    condition: "{incident.severity == 'high' or incident.severity == 'critical'}"
    continue_on_failure: true
    timeout: 60
    output_variable: ticket_id

tags:
  - account
  - identity
  - compromise
  - authentication

target_severity:
  - medium
  - high
  - critical

required_parameters:
  - username
  - severity
  - id

cleanup_actions:
  - id: archive_log_history
    type: command
    description: Archive the login history for future reference
    command: |
      #!/bin/bash
      # Archive login history from the incident investigation
      # Created: 2025-03-16 13:15:54
      # Author: Mritunjay-mj
      
      # Define variables
      LOG_PATH="{variables.login_history_path}"
      ARCHIVE_DIR="/var/log/asira/incidents/{incident.id}"
      ARCHIVE_FILE="$ARCHIVE_DIR/login_history.json"
      
      # Check if source file exists
      if [ -f "$LOG_PATH" ]; then
        echo "[+] Found login history file: $LOG_PATH"
        
        # Create archive directory with proper permissions
        mkdir -p "$ARCHIVE_DIR" || { 
          echo "[-] Error: Failed to create archive directory" >&2
          exit 1
        }
        
        # Copy file with verification
        cp "$LOG_PATH" "$ARCHIVE_FILE" && {
          echo "[+] Login history archived successfully to $ARCHIVE_FILE"
          
          # Verify copy was successful
          if cmp -s "$LOG_PATH" "$ARCHIVE_FILE"; then
            echo "[+] Archive verification successful"
            chmod 640 "$ARCHIVE_FILE"  # Set secure permissions
          else
            echo "[-] Warning: Archive verification failed" >&2
          fi
        } || {
          echo "[-] Error: Failed to archive login history" >&2
          exit 2
        }
      else
        echo "[*] No login history file found at $LOG_PATH"
        echo "[*] Nothing to archive"
      fi
      
      # Remove original file if successful
      if [ -f "$ARCHIVE_FILE" ]; then
        rm -f "$LOG_PATH" && echo "[+] Cleaned up temporary log file"
      fi
    timeout: 45
